import React, { useState, useEffect } from 'react';
import './VulnerabilityScan.css';
import { startScan } from '../services/api';  // 确保路径正确
import { useNavigate } from 'react-router-dom';

interface ScanResult {
  type: string;
  url: string;
}
interface VulnerabilityScanProps {
  onScanComplete: (results: ScanResult[], url: string) => void;
}


const VulnerabilityScan: React.FC<VulnerabilityScanProps> = ({ onScanComplete }) => {
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [showConfig, setShowConfig] = useState(false);
  const [scanConfig, setScanConfig] = useState('full');
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState<string | null>(null); // 确保 error 状态正确初始化
  const navigate  = useNavigate();

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isScanning) {
      timer = setInterval(() => {
        setProgress((prevProgress) => {
          if (prevProgress < 100) {
            return prevProgress + 10;
          } else {
            clearInterval(timer);
            setIsScanning(false);
            return 100;
          }
        });
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [isScanning]);

  const handleStartScan = async () => {
    if (!isScanning) {
      setProgress(0);
      setError(null);
      try {
        setIsScanning(true);
        const result = await startScan(url, scanConfig?scanConfig:"full");
        onScanComplete(result.results, result.url);
        navigate('/vulnerability-info');
      } catch (error) {
        setIsScanning(false);
        setError('Failed to start scan');
      }
    } else {
      setIsScanning(false);
    }
  };
  const handleSaveConfig = () => {
    setShowConfig(false);
  };
  return (
    <div className="vulnerability-scan-page">
      <video autoPlay loop muted className="background-video">
        <source src="/steampunk-background.mp4" type="video/mp4" />
        Your browser does not support the video tag.
      </video>
      <div className="scan-content-overlay">
        <h2 className="scan-page-title">Vulnerability Scan</h2>
        <div className="scan-form">
          <input 
            type="text" 
            placeholder="Enter URL" 
            value={url} 
            onChange={(e) => setUrl(e.target.value)} 
            disabled={isScanning}
          />
          <button className="scan-button" onClick={handleStartScan}>
            Scan
          </button>
        </div>
        <button className="config-button" onClick={() => setShowConfig(true)}>
          Config
        </button>
      </div>
      {showConfig && (
        <div className="config-modal">
        <div className="config-content">
          <h3>Scan Configurations</h3>
          <div className="config-options">
            <label>
              <input 
                type="radio" 
                value="full" 
                checked={scanConfig === 'full'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              Full Scan
            </label>
            <label>
              <input 
                type="radio" 
                value="xss" 
                checked={scanConfig === 'xss'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              XSS
            </label>
            <label>
              <input 
                type="radio" 
                value="brute_force" 
                checked={scanConfig === 'brute_force'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              Brute Force
            </label>
            <label>
              <input 
                type="radio" 
                value="crsf" 
                checked={scanConfig === 'crsf'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              CSRF
            </label>
            <label>
              <input 
                type="radio" 
                value="sql_injection" 
                checked={scanConfig === 'sql_injection'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              SQL Injection
            </label>
            <label>
              <input 
                type="radio" 
                value="remote_code_execution" 
                checked={scanConfig === 'remote_code_execution'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              RCE
            </label>
            <label>
              <input 
                type="radio" 
                value="file_vulnerability" 
                checked={scanConfig === 'file_vulnerability'} 
                onChange={(e) => setScanConfig(e.target.value)} 
              />
              File Vulnerability
            </label>
          </div>
          <button onClick={handleSaveConfig}>Save Configuration</button>
        </div>
      </div>
      )}
    </div>
  );
};

export default VulnerabilityScan;
